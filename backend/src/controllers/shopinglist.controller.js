import { asyncHandler } from "../utils/asyncHandler.js";
import { apiResponse } from "../utils/apiResponse.js";
import { apiError } from "../utils/apiError.js";
import { Recipe } from "../models/recipe.model.js";
import { ShoppingList } from "../models/shopinglist.model.js";

// Add item
const addItem = asyncHandler(async (req, res) => {
  const { items } = req.body; // e.g., [{ name: "Tomato", quantity: "2 pcs" }]
  const userId = req.user._id;

  let list = await ShoppingList.findOne({ userId });

  if (!list) {
    list = await ShoppingList.create({ userId, items });
  } else {
    list.items.push(...items);
    await list.save();
  }

  res
    .status(200)
    .json(new apiResponse(200, list, "Item(s) added to shopping list"));
});

// Remove item
const removeItem = asyncHandler(async (req, res) => {
  const { itemId } = req.params;
  const userId = req.user._id;

  const list = await ShoppingList.findOneAndUpdate(
    { userId },
    { $pull: { items: { _id: itemId } } },
    { new: true }
  );

  if (!list) throw new apiResponse(404, {}, "Item not found");

  res
    .status(200)
    .json(new apiResponse(200, list, "Item removed from shopping list"));
});

// Toggle purchase
const togglePurchased = asyncHandler(async (req, res) => {
  const { itemId } = req.params;
  const userId = req.user._id;

  const list = await ShoppingList.findOne({ userId });
  if (!list) {
    throw new apiResponse(404, {}, "List not found");
  }

  const item = list.items.id(itemId);
  if (!item) throw new apiResponse(404, {}, "Item not found");

  item.isPurchased = !item.isPurchased;
  await list.save();

  res
    .status(200)
    .json(
      new apiResponse(
        200,
        list,
        `Item marked as ${item.isPurchased ? "purchased" : "not purchased"}`
      )
    );
});

// generate list from recipe
const generateFromRecipe = asyncHandler(async (req, res) => {
  const { recipeId } = req.params;
  const userId = req.user._id;

  const recipe = await Recipe.findById(recipeId);
  if (!recipe) throw new apiError(404, {}, "Recipe not found");

  let list = await ShoppingList.findOne({ userId });

  const newItems = recipe.ingredients.map((i) => ({
    name: i.name,
    quantity: i.quantity,
    addedFromRecipe: recipe._id,
  }));

  if (!list) {
    list = await ShoppingList.create({
      userId,
      items: newItems,
      autoGenerated: true,
    });
  } else {
    list.items.push(...newItems);
    list.autoGenerated = true;
    await list.save();
  }

  res
    .status(200)
    .json(new apiResponse(200, list, "Shopping list generated from recipe"));
});

// get shoping list
const getShoppingList = asyncHandler(async (req, res) => {
  const userId = req.user._id;
  const list = await ShoppingList.findOne({ userId }).populate(
    "items.addedFromRecipe",
    "title"
  );

  if (!list) throw new apiResponse(404, {}, "No shopping list found");

  res.status(200).json(new apiResponse(200, list, "Shopping list fetched"));
});

// clear shoping list
const clearShoppingList = asyncHandler(async (req, res) => {
  const userId = req.user._id;
  await ShoppingList.findOneAndDelete({ userId });

  res.status(200).json(new apiResponse(200, {}, "Shopping list cleared"));
});

export {
  addItem,
  removeItem,
  togglePurchased,
  generateFromRecipe,
  getShoppingList,
  clearShoppingList,
};
